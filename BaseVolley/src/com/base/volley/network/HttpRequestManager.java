package com.base.volley.network;import java.util.HashMap;import java.util.Map;import android.text.TextUtils;import com.base.volley.utils.Profile;import com.base.volley.utils.logger.Logger;import com.base.volley.Request;import com.base.volley.Request.Method;import com.base.volley.Response;import com.base.volley.VolleyError;import com.base.volley.HttpRetryPolicy;import com.base.volley.toolbox.JsonRequestWithObject;/** * * HTTP请求类 使用方法示例： Initial initial = new Initial(); IHttpRequest httpRequest = * Service.getService(IHttpRequest.class, true); HttpIntent httpIntent = * new HttpIntent(URLContainer.getInitURL()); *  * httpRequest.request(httpIntent, new IHttpRequestCallBack() { *  * @Override public void onSuccess(HttpRequestManager httpRequestManager) { *           initial = httpRequestManager.parse(initial); } * @Override public void onFailed(String failReason) { *  *           } }); * @desc {@link #downloadUri(String, String, boolean)} Add： if *       (TextUtils.isEmpty(cookie)) { throw new *       NullPointerException("the cookie is not setted!"); } else { *       conn.setRequestProperty("Cookie", cookie); } Cookie 使用示例： *       HttpRequestManager httpRequestTask = new HttpRequestManager(); *       httpRequestTask.setCookie(cookie); HttpIntent httpIntent = new *       HttpIntent(URLContainer.getPlayHistoryInCloud(), true); */public class HttpRequestManager<T> implements IHttpRequest<T> {	private static final String TAG = HttpRequestManager.class.getSimpleName();	public static final int SUCCESS = 0x1;	public static final int FAIL = 0x2;	public static final String METHOD_GET = "GET";	public static final String METHOD_POST = "POST";	/**	 * 无网络连接错误提示	 */	public static final String STATE_ERROR_WITHOUT_NETWORK = "无网络连接，请检查您的网络。";	/**	 * IO异常错误提示	 */	public static final String STATE_ERROR_IO_EXCEPTION = "IO异常哦";	/**	 * 网络超时错误提示	 */	public static final String STATE_ERROR_TIMEOUT = "咦，暂时没有获取到数据，请稍后再试。";	/**	 * 协议错误提示	 */	public static final String STATE_ERROR_PROTOCOL_EXCEPTION = "协议不正确哦";	/**	 * URL地址错误提示	 */	public static final String STATE_ERROR_MALFORMED_URL_EXCEPTION = "地址不合法哦";		public static final String DATA_PARSE_ERROR = "数据解析出错";		public static final String UNKOWN_ERROR = "未知错误";	/**	 * 执行状态	 */	protected int state = FAIL;	protected String method = METHOD_GET;	protected boolean isSetCookie;	private boolean isUpdateCookie;	protected String cookie;		private String params;	protected boolean useEtagCache = true;	// default retry 1	protected int retryTimes = 1;	/**	 * 默认连接超时, 默认读取超时	 */	protected int connect_timeout_millis, read_timout_millis;	/**	 * 从网络拿到的数据	 */	protected String dataString;		protected T dataObject;		protected Class<T> clazz;		protected JsonRequestWithObject<T> request;		HttpRetryPolicy httpRetryPolicy;	/**	 * 请求的url地址	 */	protected String uri;	public HttpRequestManager() {	}	class EtagFile {		public String etag;		public String content;	}	@Override	public void request(HttpIntent httpIntent,			final IHttpRequestCallBack<T> callBack) {		request(httpIntent, callBack, false, null);	}		@Override	public void request(HttpIntent httpIntent,			final IHttpRequestCallBack<T> callBack, final boolean isClearCache) {		request(httpIntent, callBack, isClearCache, null);	}		@Override	public void request(HttpIntent httpIntent,			final IHttpRequestCallBack<T> callBack, Class<T> clazz) {		request(httpIntent, callBack, false, clazz);	}	@Override	/**	 * when we use this method,means when use JsonObjectRequest,when request finished,will parse to Class<T> Object.	 */	public void request(HttpIntent httpIntent,			final IHttpRequestCallBack<T> callBack, final boolean isClearCache, Class<T> clazz) {		uri = httpIntent.getStringExtra(HttpIntent.URI);		Logger.d(TAG, "request uri: " + uri + ", this = " + this);		method = httpIntent.getStringExtra(HttpIntent.METHOD);		isSetCookie = httpIntent.getBooleanExtra(HttpIntent.IS_SET_COOKIE,				false);		isUpdateCookie = httpIntent.getBooleanExtra(				HttpIntent.IS_UPDATE_COOKIE, false);		connect_timeout_millis = httpIntent.getIntExtra(				HttpIntent.CONNECT_TIMEOUT, 5000);		read_timout_millis = httpIntent.getIntExtra(HttpIntent.READ_TIMEOUT,				7000);		params = httpIntent.getStringExtra(HttpIntent.POST_PARAM);		this.clazz = clazz;				int volleyMethod = Method.GET;		if (method.equals(METHOD_POST)) {			volleyMethod = Method.POST;		}		request = new JsonRequestWithObject<T>(volleyMethod, uri, params, clazz, new Response.Listener<T>() {			@Override			public void onResponse(Response<T> response) {				if (callBack != null) {					state = SUCCESS;					dataString = response.resultString;					dataObject = response.result;					callBack.onSuccess(HttpRequestManager.this);				}			}		}, new Response.ErrorListener() {			@Override			public void onErrorResponse(VolleyError error) {				if (callBack != null) {					Logger.d(TAG,							"HttpRequestManager.request(...).new AsyncTask() {...}#onPostExecute()"									+ error.toString());					state = FAIL;					callBack.onFailed(error.toString());				}			}		});		request.setShouldCache(useEtagCache);		request.setIsUpdateCookie(isUpdateCookie);		request.setRetryPolicy(new HttpRetryPolicy(connect_timeout_millis, read_timout_millis, retryTimes, 0));		request.setStringParams(params);		Map<String, String> headers = new HashMap<String, String>();		if (isSetCookie) {			if (!TextUtils.isEmpty(cookie)) {				headers.put("Cookie", cookie);			} else {				Logger.d(TAG, "!!==!! isSetCookie but Cookie is empty");			}		}		if (isClearCache) {			headers.put("Update-Cache", "Yes");			headers.put("User-Agent", Profile.User_Agent					+ "" + System.currentTimeMillis());		} else {			headers.put("User-Agent", Profile.User_Agent);		}		request.setHeaders(headers);		if(Profile.sHttpRequestQueue != null) {			Profile.sHttpRequestQueue.add(request);		}			}		/**	 * send request with volley normal support request,like jsonRequest and so on.	 * @param request	 * @param retryTimes	 * @return	 */	public void request(Request<?> request,int retryTimes) {		Logger.d(TAG, "request uri: " + uri + ", this = " + this);		request.setShouldCache(false);		request.setRetryPolicy(new HttpRetryPolicy(5000, 7000, retryTimes, 0));		if(Profile.sHttpRequestQueue != null) {			Profile.sHttpRequestQueue.add(request);		}			}	@Override	public void cancel() {		if(request != null && !request.isCanceled()) {			request.cancel();		}	}		public Request.Status getStatus() {		if (null != request) {			return request.getStatus();		} else {			return Request.Status.PENDING;		}	}	@Override	public String getDataString() {		return dataString;	}		@Override	public T getDataObject() {		return dataObject;	}	@Override	public void setCookie(String cookie) {		this.cookie = cookie;	}	public String getUpdateCookie() {		if(request != null) {			return request.getUpdateCookie();		}		return null;	}	public void setRetryTimes(int retryTimes) {		this.retryTimes = retryTimes;	}	public void setUseEtagCache(boolean useEtagCache) {		this.useEtagCache = useEtagCache;	}	}